{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nexport const fall = () => {\n  console.log(\"falling!\");\n  const words = [\"React\", \"bootstrap\", \"reactUI\", \"Javascript\", \"Node.js\", \"Git\", \"Ruby\", \"Rails\", \"PostGreSQL\"];\n};\n\nconst useModalState = (defaultValue = false) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(defaultValue);\n  const open = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n  const close = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  return {\n    isOpen,\n    open,\n    close\n  };\n};\n\n_s(useModalState, \"8pQUseFzl1UNi2z+SlgVg+rVeQA=\");","map":{"version":3,"sources":["C:/Users/alpha/Documents/webdev/pro-portfolio/src/helper_functions.js"],"names":["useCallback","useState","fall","console","log","words","useModalState","defaultValue","isOpen","setIsOpen","open","close"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAMC,KAAK,GAAG,CACZ,OADY,EACJ,WADI,EACQ,SADR,EACkB,YADlB,EAC+B,SAD/B,EACyC,KADzC,EAC+C,MAD/C,EACsD,OADtD,EAC8D,YAD9D,CAAd;AAGD,CALM;;AAOP,MAAMC,aAAa,GAAG,CAACC,YAAY,GAAG,KAAhB,KAA0B;AAAA;;AAC9C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACM,YAAD,CAApC;AAEA,QAAMG,IAAI,GAAGV,WAAW,CAAC,MAAM;AAC7BS,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAFuB,EAEtB,EAFsB,CAAxB;AAIA,QAAME,KAAK,GAAGX,WAAW,CAAC,MAAM;AAC9BS,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAIA,SAAO;AAACD,IAAAA,MAAD;AAAQE,IAAAA,IAAR;AAAaC,IAAAA;AAAb,GAAP;AACD,CAZD;;GAAML,a","sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nexport const fall = () => {\r\n  console.log(\"falling!\");\r\n  const words = [\r\n    \"React\",\"bootstrap\",\"reactUI\",\"Javascript\",\"Node.js\",\"Git\",\"Ruby\",\"Rails\",\"PostGreSQL\"\r\n  ]\r\n}\r\n\r\nconst useModalState = (defaultValue = false) => {\r\n  const [isOpen, setIsOpen] = useState(defaultValue);\r\n\r\n  const open = useCallback(() => {\r\n    setIsOpen(true)\r\n  },[])\r\n\r\n  const close = useCallback(() => {\r\n    setIsOpen(false)\r\n  }, [])\r\n  \r\n  return {isOpen,open,close}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}