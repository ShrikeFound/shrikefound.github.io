{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alpha\\\\Documents\\\\webdev\\\\pro-portfolio\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport ThemeToggler from \"./components/ThemeToggler\";\nimport \"./styles/main.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleTheme = () => {\n    console.log(\"toggling!\");\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [\"hello world\", /*#__PURE__*/_jsxDEV(ThemeToggler, {\n      toggleTheme: () => toggleTheme()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1NR3O0/bzzhjlLyt740h+JhxH9c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/alpha/Documents/webdev/pro-portfolio/src/App.js"],"names":["useState","ThemeToggler","App","theme","setTheme","toggleTheme","console","log"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,oBAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,OAAD,CAAlC;;AAEA,QAAMK,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAJ,IAAAA,KAAK,KAAK,OAAV,GAAoBC,QAAQ,CAAC,MAAD,CAA5B,GAAuCA,QAAQ,CAAC,OAAD,CAA/C;AACD,GAHD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2CAEE,QAAC,YAAD;AAAc,MAAA,WAAW,EAAE,MAAMC,WAAW;AAA5C;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAhBQH,G;;KAAAA,G;AAkBT,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport ThemeToggler from \"./components/ThemeToggler\";\nimport \"./styles/main.scss\"\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleTheme = () => {\n    console.log(\"toggling!\")\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      hello world\n      <ThemeToggler toggleTheme={() => toggleTheme()}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}